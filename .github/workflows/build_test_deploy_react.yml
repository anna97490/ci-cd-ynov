name: Build, Test and Deploy React Application

# Controls when the action will run.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install  

      - name: npm ci, build and test
        run: |
          npm run jsdoc
          npm run build --if-present
          npm test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Setup pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Check if NPM package version has been updated
        run: |
          echo "Récupération de la version publiée sur npm..."
          PUBLISHED_VERSION=$(npm view ci-cd-ynov-anna version || echo "0.0.0")
          echo "Version publiée : $PUBLISHED_VERSION"

          echo "Récupération de la version locale du package..."
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          echo "Version locale : $LOCAL_VERSION"

          if [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "NEW_VERSION=true" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=false" >> $GITHUB_ENV
          fi

      - name: Build and publish package on NPM
        if: ${{ env.NEW_VERSION == 'true' }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          git config --global user.email "anna.cousin97490@gmail.com"
          git config --global user.name "anna97490"
          NODE_ENV=production rimraf dist && mkdir dist && npx babel src --out-dir dist --copy-files
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
          #if-no-files-found: error

      # Étapes Docker/Cypress ajoutées ici
      - name: Build the stack
        run: docker-compose -f docker-compose-v3.yml up -d
      - name: Run e2e tests with Cypress
        uses: cypress-io/github-action@v6
      - name: Stop the stack
        run: docker-compose -f docker-compose-v3.yml down

  # Deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    needs: build_test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-vercel:
    name: Deploy Backend to Vercel
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel deploy --prod --token=$VERCEL_TOKEN
